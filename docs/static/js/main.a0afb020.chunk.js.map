{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","hooks/useFetchGifs.js","components/GifGridItem.js","components/GifGrid.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","useFetchGifs","loading","state","setstate","useEffect","then","imgs","GifGridItem","className","src","alt","GifGrid","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAqCeA,EAlCK,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EAEHC,mBAAS,IAFN,mBAEhCC,EAFgC,KAEpBC,EAFoB,KAiBvC,OAEI,sBAAMC,SAXW,SAACC,GAClBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAe,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OACvCN,EAAc,MAMlB,SACE,uBACCO,KAAK,OACLC,MAAOT,EACPU,SAnBmB,SAAEP,GACxBF,EAAeE,EAAEQ,OAAOF,a,+BCWjBG,EAjBF,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAENC,EAFM,iDAE2CC,UAAUH,GAFrD,+DAGOI,MAAOF,GAHd,cAGNG,EAHM,gBAIWA,EAAKC,OAJhB,uBAIJC,EAJI,EAIJA,KAEFC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAV9B,kBAcLM,GAdK,4CAAH,sDCqBEO,EApBM,SAAEf,GAAe,IAAD,EAEPd,mBAAS,CAC/BqB,KAAK,GACLS,SAAS,IAJoB,mBAE1BC,EAF0B,KAEnBC,EAFmB,KAiBjC,OAVAC,qBAAW,WACPpB,EAASC,GACJoB,MAAM,SAAAC,GACHH,EAAS,CACLX,KAAMc,EACNL,SAAS,SAGtB,CAAEhB,IAEEiB,GCRIK,EAVK,SAAC,GAAoB,IAAlBV,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IAE1B,OACI,sBAAKqB,UAAU,yCAAf,UACI,qBAAKC,IAAMtB,EAAMuB,IAAMb,IACvB,kCAAMA,EAAN,WCoBGc,EAvBC,SAAC,GAAkB,IAAhB1B,EAAe,EAAfA,SAAe,EAEGe,EAAcf,GAAlCa,EAFiB,EAEtBN,KAAaS,EAFS,EAETA,QAErB,OACA,qCACE,mCAAMhB,EAAN,OACEgB,GAAW,mBAAGO,UAAU,mCAAb,qBAEb,qBAAKA,UAAU,8CAAf,SAEMV,EAAOJ,KAAK,SAAAC,GAAG,OACX,cAAC,EAAD,eAEKA,GADAA,EAAIC,aCWVgB,EAxBM,WAAO,IAAD,EAEazC,mBAAS,CAAC,kBAFvB,mBAEhB0C,EAFgB,KAEJ3C,EAFI,KAIvB,OACI,qCACI,8CACA,cAAC,EAAD,CAAaA,cAAgBA,IAC7B,uBAEA,6BAEQ2C,EAAWnB,KAAK,SAAAT,GAAQ,OACpB,cAAC,EAAD,CAEAA,SAAWA,GADLA,Y,MCZ9B6B,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.a0afb020.chunk.js","sourcesContent":["import { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nconst AddCategory = ({ setCategories }) => {\n\n    const [inputValue, setInputValue] = useState('');\n\n    const handleInputChange = ( e ) => {\n        setInputValue( e.target.value);\n    };\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n\n        if (inputValue.trim().length > 2) {\n            setCategories( cats => [inputValue, ...cats] );\n            setInputValue('');\n        }\n    };\n\n    return (\n\n        <form onSubmit={ handleSubmit }>\n          <input\n           type=\"text\" \n           value={inputValue} \n           onChange={handleInputChange} />\n        </form>\n\n    );\n}\n\nAddCategory.propTypes = {\n    setCategories: PropTypes.func.isRequired\n}\n \n\nexport default AddCategory;","\n\nconst getGifs = async( category ) => {\n        \n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category) }&limit=10&api_key=QUtBSeCM39bg5IEq2YvyQRoNHtVr3vcQ`\n    const resp = await fetch( url );\n    const { data } = await resp.json();\n\n    const gifs = data.map( img => {\n        return {\n            id: img.id,\n            title: img.title,\n            url: img.images?.downsized_medium.url\n        }\n    })\n\n    return gifs;\n}\n\nexport default getGifs;","import { useState, useEffect } from 'react';\nimport getGifs from '../helpers/getGifs';\n\nconst useFetchGifs = ( category ) => {\n    \n    const [state, setstate] = useState({\n        data:[],\n        loading: true\n    });\n\n    useEffect( () => {\n        getGifs( category )\n            .then( imgs => {\n                setstate({\n                    data: imgs,\n                    loading: false\n                });\n            });\n    }, [ category ])\n\n    return state; \n}\n \nexport default useFetchGifs;","\n\nconst GifGridItem = ({ title, url }) => {\n\n    return (  \n        <div className=\"card animate__animated animate__fadeIn\">\n            <img src={ url } alt={ title } />\n            <p> { title } </p>\n        </div>\n    );\n}\n \nexport default GifGridItem;","// import { useState, useEffect } from 'react';\nimport useFetchGifs from '../hooks/useFetchGifs';\nimport GifGridItem from './GifGridItem';\n\nconst GifGrid = ({ category }) => {\n\n    const { data:images, loading } = useFetchGifs( category );\n\n    return (\n    <>\n      <h3> {category} </h3>\n      { loading && <p className=\"animate__animated animate__flash\">Loading</p>}\n\n      <div className=\"card-grid animate__animated animate__fadeIn\">\n          {\n            images.map( img => (\n                <GifGridItem \n                key={img.id}\n                { ...img }         \n                />\n          ))\n          }\n      </div>\n    </>\n    );\n}\n \nexport default GifGrid;","import { useState } from 'react';\nimport AddCategory from './components/AddCategory';\nimport GifGrid from './components/GifGrid';\n\nconst GifExpertApp = () => {\n\n    const [categories, setCategories] = useState(['Dragon Ball Z']);\n\n    return (\n        <>\n            <h2>GifExpertApp</h2>\n            <AddCategory setCategories={ setCategories }/>\n            <hr />\n\n            <ol>\n                {\n                    categories.map( category => (\n                        <GifGrid \n                        key={ category }\n                        category={ category }\n                        />\n                    ))\n                }\n            </ol>\n        </>\n    );\n}\n \nexport default GifExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\n\nimport './index.css';\n\nReactDOM.render(\n    <GifExpertApp /> ,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}